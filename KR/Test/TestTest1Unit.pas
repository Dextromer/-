unit TestTest1Unit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, AdaptersUnit, System.Generics.Collections, Test1Unit, TestsUnit,
  AccessAdapterUnit;

type
  // Test methods for class Test1

  TestTest1 = class(TTestCase)
  strict private
    Fest1: Test1;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestsetTest;
    procedure TestgetQuest;
    procedure TestgetAnswer;
    procedure TestgetCorrect;
  end;

implementation

procedure TestTest1.SetUp;
begin
  Fest1 := Test1.Create;
end;

procedure TestTest1.TearDown;
begin
  Fest1.Free;
  Fest1 := nil;
end;

procedure TestTest1.TestsetTest;
var
  caption: string;
begin
  // TODO: Setup method call parameters
  caption:='Типы и структуры данных';
  Fest1.setTest(caption);
  CheckEquals(caption, 'Типы и структуры данных');
  CheckNotEquals(caption,'11111');
  // TODO: Validate method results
end;

procedure TestTest1.TestgetQuest;
var
  ReturnValue: TList<string>;
begin
  Fest1.setTest('Типы и структуры данных');
  ReturnValue := Fest1.getQuest;
  CheckEquals(ReturnValue.Items[1], 'Что такое составной тип данных?');
  CheckTrue(ReturnValue.Items[0]='Что такое простой тип данных?');
  // TODO: Validate method results
end;

procedure TestTest1.TestgetAnswer;
var
  ReturnValue: TList<string>;
begin
  Fest1.setTest('Теоретические основы баз данных');
  ReturnValue := Fest1.getAnswer;
  CheckEquals(ReturnValue.Count, 7);
  CheckNotEquals(ReturnValue.Items[4],'1111');
  CheckEquals(ReturnValue.Last, 'Microsoft Access, Visual FoxPro.');
  // TODO: Validate method results
end;

procedure TestTest1.TestgetCorrect;
var
  ReturnValue: TDictionary<integer, integer>;
begin
  Fest1.setTest('Теоретические основы баз данных');
  ReturnValue := Fest1.getCorrect;
  CheckEquals(ReturnValue.Items[1], 1);
  CheckEquals(ReturnValue.Items[2], 2);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTest1.Suite);
end.

