unit TestAccessAdapterUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Generics.Collections, AdaptersUnit, SysUtils, Data.Win.ADODB,
  AccessAdapterUnit, Data.DB;

type
  // Test methods for class AccessAdapter

  TestAccessAdapter = class(TTestCase)
  strict private
    FAccessAdapter: AccessAdapter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetAnswerTableName;
    procedure TestGetAnswerTable;
    procedure TestGetCorrectTableName;
    procedure TestGetCorrectTable;
    procedure TestGetQuestTableName;
    procedure TestGetQuestTable;
    procedure TestgetMenu;
    procedure TestsetTest;
    procedure TestgetQuest;
    procedure TestgetAnswer;
    procedure TestgetCorrect;
  end;

implementation

procedure TestAccessAdapter.SetUp;
begin
  FAccessAdapter := AccessAdapter.Create;
end;

procedure TestAccessAdapter.TearDown;
begin
  FAccessAdapter.Free;
  FAccessAdapter := nil;
end;

procedure TestAccessAdapter.TestGetAnswerTableName;
var
  ReturnValue: string;
begin
  ReturnValue := FAccessAdapter.GetAnswerTableName;
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestGetAnswerTable;
var
  ReturnValue: TList<string>;
  answer: string;
begin
  // TODO: Setup method call parameters
  FAccessAdapter.setTest('Теоретические основы баз данных');
  answer:=FAccessAdapter.getAnswerTableName;
  ReturnValue := FAccessAdapter.GetAnswerTable(answer);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestGetCorrectTableName;
var
  ReturnValue: string;
begin
  ReturnValue := FAccessAdapter.GetCorrectTableName;
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestGetCorrectTable;
var
  ReturnValue: TDictionary<integer, integer>;
  correct: string;
begin
  // TODO: Setup method call parameters
  FAccessAdapter.setTest('Теоретические основы баз данных');
  correct:=FAccessAdapter.getCorrectTableName;
  ReturnValue := FAccessAdapter.GetCorrectTable(correct);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestGetQuestTableName;
var
  ReturnValue: string;
begin
  ReturnValue := FAccessAdapter.GetQuestTableName;
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestGetQuestTable;
var
  ReturnValue: TList<string>;
  quest: string;
begin
  // TODO: Setup method call parameters
  FAccessAdapter.setTest('Теоретические основы баз данных');
  quest:=FAccessAdapter.getQuestTableName;
  ReturnValue := FAccessAdapter.GetQuestTable(quest);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetMenu;
var
  ReturnValue: TList<string>;
begin
  ReturnValue := FAccessAdapter.getMenu;
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestsetTest;
var
  caption: string;
begin
  // TODO: Setup method call parameters
  caption:='Теоретические основы баз данных';
  FAccessAdapter.setTest(caption);
  CheckEquals(Caption,'Теоретические основы баз данных');

  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetQuest;
var
  ReturnValue: TList<string>;
begin
  FAccessAdapter.setTest('Теоретические основы баз данных');
  ReturnValue := FAccessAdapter.getQuest;
  CheckEquals(ReturnValue.Items[3],'Дайте определение СУБД общего назначения');
  CheckEquals(ReturnValue.Count, 7);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetAnswer;
var
  ReturnValue: TList<string>;
begin
  FAccessAdapter.setTest('Теоретические основы баз данных');
  ReturnValue := FAccessAdapter.getAnswer;
  CheckEquals(ReturnValue.Items[4],'Аппаратное и программное обеспечение, данные, процедуры и пользователи.');
  CheckNotEquals(ReturnValue.Items[1],'23');
  CheckNotEquals(ReturnValue.Count, 5);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetCorrect;
var
  ReturnValue: TDictionary<integer, integer>;
begin
  FAccessAdapter.setTest('Теоретические основы баз данных');
  ReturnValue := FAccessAdapter.getCorrect;
  CheckEquals(ReturnValue.Items[3], 3);
  CheckNotEquals(ReturnValue.Items[5], 1);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestAccessAdapter.Suite);
end.

