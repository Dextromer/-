unit TestPhisicsControllerUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PhisicsControllerUnit, ControllersUnit, Test1LoggingUnit,
  System.Generics.Collections, Dialogs, MainUnit, SysUtils, MenuLoggingUnit, stdCtrls,
  TestsUnit;

type
  // Test methods for class PhisicsController

  TestPhisicsController = class(TTestCase)
  strict private
    FPhisicsController: PhisicsController;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestsetTest;
    procedure TestgetMenu;
    procedure TestgetQuest;
    procedure TestgetAnswer;
    procedure TestgetCorrect;
  end;

implementation

procedure TestPhisicsController.SetUp;
begin
  FPhisicsController := PhisicsController.Create;
end;

procedure TestPhisicsController.TearDown;
begin
  FPhisicsController.Free;
  FPhisicsController := nil;
end;

procedure TestPhisicsController.TestsetTest;
var
  caption: string;
begin
  // TODO: Setup method call parameters
  caption:=FPhisicsController.getMenu.Items[1];
  FPhisicsController.setTest(caption);
  CheckEquals(caption, 'Типы и структуры данных');
  CheckNotEquals(caption, 'Теоретические основы баз данных');
  // TODO: Validate method results
end;

procedure TestPhisicsController.TestgetMenu;
var
  ReturnValue: TList<string>;
begin
  ReturnValue := FPhisicsController.getMenu;
  CheckNotEquals(ReturnValue.Items[1],'Ответ');
  CheckEquals(ReturnValue.Items[0], 'Теоретические основы баз данных');
  CheckNotEquals(ReturnValue.First, '11');
  // TODO: Validate method results
end;

procedure TestPhisicsController.TestgetQuest;
var
  ReturnValue: TList<string>;
begin
  FPhisicsController.setTest('Типы и структуры данных');
  ReturnValue := FPhisicsController.getQuest;
  CheckNotEquals(ReturnValue.Items[4],'1111');
  CheckEquals(ReturnValue.Count, 5);
  // TODO: Validate method results
end;

procedure TestPhisicsController.TestgetAnswer;
var
  ReturnValue: TList<string>;
begin
  FPhisicsController.setTest('Типы и структуры данных');
  ReturnValue := FPhisicsController.getAnswer;
  CheckEquals(ReturnValue.Items[1],'Тип данных, конструируемый пользователем для решения конкретных задач.');
  CheckTrue(ReturnValue.Items[3]<>'sss');
  CheckNotEquals(ReturnValue.Items[1],'Ответ');
  CheckEquals(ReturnValue.Count, 5);
  // TODO: Validate method results
end;

procedure TestPhisicsController.TestgetCorrect;
var
  ReturnValue: TDictionary<integer,integer>;
begin
  FPhisicsController.setTest('Типы и структуры данных');
  ReturnValue := FPhisicsController.getCorrect;
  CheckEquals(ReturnValue.Items[2], 2);
  CheckNotEquals(ReturnValue.Items[3], 11);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestPhisicsController.Suite);
end.

